% simAnalyse.m
% 
% Analysis of vessel simulation data generated by simrun.m (which calls the
% function simplevesselsim.m). This script should be a GUI-based anaylis
% tool, allowing the user to select a saved .mat file (which should contain
% 1 or 2 stored phase matrices, and a p structure containing all parameter
% information, and maybe some other stuff).
%
% The actual calculations of the anaylsis will generally be performed by
% the function MTC_plotSignal, which will be called in this script, and
% given specific functional specifiers by it (although MTC_plotSignal
% should still be useable on its own, as in within simrun.m)
%
% 
%       Copyright (C) University of Oxford, 2017
%
% 
% Created by MT Cherukara, February 2017
%
% CHANGELOG:
%
% 2017-07-03 (MTC). Added the option to plot signal on a logarithmic scale
% (also made changes to plotSignal.m)
%
% 2017-05-18 (MTC). Added input options so that the function can be called
% from the command line without the need for the GUI (this will enable easy
% repeated calls)
%
% 2017-02-23 (MTC). Added GUI.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%     (main) simAnalyse               %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function simAnalyse(varargin)
    close all;
    
    % first, check to see if any input arguments have been provided, if
    % not, display the GUI
    if nargin == 0
%         disp('Display the gui!');
    
    % h - structure containing all ui element handles
    % r - structure containing all random parameter information
    r.open = 1; % initialize the structure, because we refer to it later
    
    % create figure
    fig = figure(99);
    set(fig,'Name','simAnalyse','OuterPosition',[200, 200, 800, 600]);
    
    
    % Title Text
    h.tx00 = uicontrol('Style','Text',...
                       'Position',[100,480,600,30],...
                       'String','Analysis for Vessel Simulator Data',...
                       'FontSize',18);
                 
                   
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%   Select data file
    
    % Text 'Select phase data file to analyse:'
    h.tx01 = uicontrol('Style','Text',...
                       'Position',[10,430,250,25],...
                       'String','Select first phase data file:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
    
    % Edit field
    h.inp1 = uicontrol('Style','Edit',...
                       'Position',[270,430,400,25],...
                       'String','',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
    
    % Browse button
    h.but1 = uicontrol('Style','Pushbutton',...
                       'Position',[680,430,100,25],...
                       'String','Browse...',...
                       'FontSize',14,...
                       'Callback',{@pickData,h});
                   
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%   Optionally select second data file
    
    % Text 'Select second phase data file:'
    h.tx02 = uicontrol('Style','Text',...
                       'Position',[10,400,250,25],...
                       'String','Select second phase data file:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
    
    % Edit field
    h.inp2 = uicontrol('Style','Edit',...
                       'Position',[270,400,400,25],...
                       'String','',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
    
    % Browse button
    h.but2 = uicontrol('Style','Pushbutton',...
                       'Position',[680,400,100,25],...
                       'String','Browse...',...
                       'FontSize',14,...
                       'Callback',{@pickData2,h});
                   
                   
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%   Spin echo options - these are enabled by the checkboxes below
    
    % Text - 'TE'
    h.tx12 = uicontrol('Style','Text',...
                       'Position',[120,330,40,25],...
                       'String','TE:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
       
    % Edit field - TE - default 74 ms
    h.inTE = uicontrol('Style','Edit',...
                       'Position',[160,330,100,25],...
                       'String','74',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
    
    % Text - 'ms'
    h.tx13 = uicontrol('Style','Text',...
                       'Position',[260,330,40,25],...
                       'String','ms',...
                       'Fontsize',14,...
                       'HorizontalAlignment','Left');
     
    % Text - 'tau' 
    h.tx14 = uicontrol('Style','Text',...
                       'Position',[120,270,40,25],...
                       'String','tau:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
           
    % Edit field - Tau - default 2 ms
    h.inDT = uicontrol('Style','Edit',...
                       'Position',[160,270,100,25],...
                       'String','2',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right',...
                       'Enable','on'); % switched on by default
         
    % Text - 'ms'
    h.tx15 = uicontrol('Style','Text',...
                       'Position',[260,270,40,25],...
                       'String','ms',...
                       'Fontsize',14,...
                       'HorizontalAlignment','Left'); 
                   
                   
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%   Sequence selection
    
    % Section title text - 'Sequences'
    h.tx10 = uicontrol('Style','Text',...
                       'Position',[20,360,100,25],...
                       'String','Sequences:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
    
    % Checkbox - gradient echo - no callback
    h.ch10 = uicontrol('Style','Checkbox',...
                       'Position',[30,330,100,25],...
                       'String','GRE',...
                       'FontSize',14);
    
    % Checkbox - GESSE - no callback
    h.ch12 = uicontrol('Style','Checkbox',...
                       'Position',[30,300,100,25],...
                       'String','GESSE',...
                       'FontSize',14);
                   
    % Checkbox - ASE - switches the Tau field on or off
    %       this will be switched on by default, because it's the only one
    %       we actually use!
    h.ch13 = uicontrol('Style','Checkbox',...
                       'Position',[30,270,100,25],...
                       'String','ASE',...
                       'FontSize',14,...
                       'Value',1,...
                       'Callback',{@switchASE,h});
            
    % Checkbox - MASE (CURRENTLY NOT WORKING)
	h.ch14 = uicontrol('Style','Checkbox',...
                       'Position',[30,240,100,25],...
                       'String','MASE',...
                       'FontSize',14,...
                       'Enable','off');
                   
    % Checkbox - Further example (CURRENTLY NOT WORKING)
	h.ch14 = uicontrol('Style','Checkbox',...
                       'Position',[30,210,150,25],...
                       'String','another sequence',...
                       'FontSize',14,...
                       'Enable','off');
 
                   
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%   Analysis Options
    
    % Section title text - 'Analysis options:'
    h.tx20 = uicontrol('Style','Text',...
                       'Position',[400,360,150,25],...
                       'String','Analysis options:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
                   
    % Checkbox - normalise - on by default
    h.chNM = uicontrol('Style','Checkbox',...
                       'Position',[400,330,250,25],...
                       'String','Normalise curves',...
                       'FontSize',14,...
                       'Value',1);
                   
    % Checkbox - aggregate - on by default
    h.chAG = uicontrol('Style','Checkbox',...
                       'Position',[400,300,250,25],...
                       'String','Aggregate repeated runs',...
                       'FontSize',14,...
                       'Value',1);
                   
    % Text - 'T2:' - for when T2 effects are included
	h.tx21 = uicontrol('Style','Text',...
                       'Position',[450,240,40,25],...
                       'String','T2:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
                   
    % Edit field - T2 - default 110 ms
	h.inT2 = uicontrol('Style','Edit',...
                       'Position',[490,240,60,25],...
                       'String','110',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right',...
                       'Enable','off');
                  
    % Text - 'ms'
	h.tx22 = uicontrol('Style','Text',...
                       'Position',[550,240,40,25],...
                       'String','ms',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
                   
    % Checkbox - T2 effects - switches on the T2 option above
    h.chT2 = uicontrol('Style','Checkbox',...
                       'Position',[400,270,200,25],...
                       'String','Include T2 effects',...
                       'FontSize',14,...
                       'Callback',{@switchT2,h});
                   
    % Checkbox - IV signal
    h.chIV = uicontrol('Style','Checkbox',...
                       'Position',[400,210,250,25],...
                       'String','Include Intravascular signal',...
                       'FontSize',14);
   
                   
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%   Output options
    
    % Section title text - 'Output options:'
    h.tx30 = uicontrol('Style','Text',...
                       'Position',[30,120,150,25],...
                       'String','Output options:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
    
    % Text - 'Figure:' - for when Plot Graph is selected
    h.tx31 = uicontrol('Style','Text',...
                       'Position',[150,90,100,25],...
                       'String','Figure:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
    
    % Edit field - Figure number - default 1
    h.inFG = uicontrol('Style','Edit',...
                       'Position',[250,90,40,25],...
                       'String','1',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
                   
    % Text - 'Title:' - for when Plot Grah is selected
    h.tx32 = uicontrol('Style','Text',...
                       'Position',[300,90,50,25],...
                       'String','Title:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
    
    % Edit field - figure title - default BLANK
    h.inFT = uicontrol('Style','Edit',...
                       'Position',[350,90,250,25],...
                       'String','',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
                   
    % Checkbox - plot analytical ASE signal - for when ASE is selected
    h.ch01 = uicontrol('Style','Checkbox',...
                       'Position',[60,60,250,25],...
                       'String','Also plot analytical ASE signal',...
                       'FontSize',14);   
                   
    % Checkbox - plot error bars
    h.ch02 = uicontrol('Style','Checkbox',...
                       'Position',[300,60,250,25],...
                       'String','Show error bars',...
                       'FontSize',14); 
                   
    % Checkbox - plot on log scale
    h.ch03 = uicontrol('Style','Checkbox',...
                       'Position',[450,60,250,25],...
                       'String','Plot ln(Signal)',...
                       'FontSize',14); 
    
    % Checkbox - plot graph - on by default - switches the Figure options
    h.ch31 = uicontrol('Style','Checkbox',...
                       'Position',[30,90,150,25],...
                       'String','Plot Graph',...
                       'FontSize',14,...
                       'Value',1,...
                       'Callback',{@switchPlot,h});
                   
    % Checkbox - save results - no callback
   	h.ch32 = uicontrol('Style','Checkbox',...
                       'Position',[30,30,150,25],...
                       'String','Save Results',...
                       'FontSize',14);
      
                   
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%   Go button - calls runAnalysis, which calls parses the rest of the
    %%%   inputs, loads the data, does some pre-processing (e.g. aggregate)
    %%%   and then sends it over to plotSignal actually process
    h.but0 = uicontrol('Style','Pushbutton',...
                       'Position',[650,20,130,60],...
                       'String','Plot',...
                       'FontSize',18,...
                       'Callback',{@runAnalysis,h});
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%     Non-Gui version             %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % if some inputs have been provided, fill in the rest automatically,
    % then get to work with the processing, without displaying the GUI
    else % length(varargin) == 0
        
        % parse arguments
        p = inputParser;

        % possible values for type of sequence
        expectedSeq = {'GRE','GESSE','ASE'};
        
        % need the user to specify an input phase data file
        addRequired(p,'phasedata', @(x) isa(x,'char'));
        
        % optional parameters, to be supplied as name-value pairs
        addParameter(p,'TE',60);        % TE        -   60 ms
        addParameter(p,'tau',2);        % tau       -	2 ms
        addParameter(p,'normalise',1);  % normalise -   yes
        addParameter(p,'incT2',1);      % T2 effect -   include
        addParameter(p,'T2',110);       % T2 value  -   110 ms
        addParameter(p,'incIV',1);      % blood signal - include
        addParameter(p,'display',0);    % display plot - no
        addParameter(p,'save',0);       % save results - yes
        addParameter(p,'log',0);        % log plot     - no
        addParameter(p,'seq','ASE',@(x) any(validatestring(x,expectedSeq)));
        
        parse(p,varargin{:});
        
        % now send the results to an alternative version of runAnalysis
        runAnalysisLine(p);
        
    end % length(varargin) == 0
                  
return;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%     runAnalysis                     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function runAnalysis(~,~,h)
    % this runs the actual analysis of our data
    
    % first, read the users input, and load that dataset:
    filename = get(h.inp1,'String');
    load(filename);
    
    % now check whether the input file has 1 or 2 storedPhase matrices in
    % it, and load both of them as sp1 and sp2, and define structures p1
    % and p2 to match
    
    twoMats = 0; % the default will be to analyse only 1 set of values at a time
    
    pnames = who('*phase*','*Phase*'); % this will list all the variables with the word 'phase' in their name
    
    sp1 = eval(pnames{1}); % take the first 'phase' variable
    p1 = p;
    
    if length(pnames) > 1
        twoMats = 1; % we'll use this later to repeat the analysis process
        sp2 = eval(pnames{2}); % if there are more than 3, tough...
        p2 = p;
    end
    
    % now check whether the user has specified a second input file
    clear *phase* *Phase* p
    if ~isempty(get(h.inp2,'String'))
        if twoMats
            disp('Two input matrices have already been provided!');
            
        else
            filename = get(h.inp2,'String');
            load(filename);
            
            twoMats = 2;
            
            pnames = who('*phase*','*Phase*');
            sp2 = eval(pnames{1});
            p2 = p;
            
        end
    end
    
    % second, check user's selection of output options:
    r.display = get(h.ch31,'Value');
    r.fnum = str2double(get(h.inFG,'String'));
    r.ftit = get(h.inFT,'String');
    r.save = get(h.ch32,'Value');
    
    % if there are two inputs given, construct a smart title string based
    % on the similarities/differences between their p structures
    if (twoMats == 2) && isempty(r.ftit)
        r.ftit = smartTitle(p1,p2);
    end
    
    % and sequence/analysis options:
    r.plotFID       = get(h.ch10,'Value');
    r.plotGESSE     = get(h.ch12,'Value');
    r.plotASE       = get(h.ch13,'Value');
    r.incT2         = get(h.chT2,'Value');
    r.incIV         = get(h.chIV,'Value');
    r.plotAnalytic  = get(h.ch01,'Value');
    r.plotErrors    = get(h.ch02,'Value');
    r.normalise     = get(h.chNM,'Value');
    r.plotLog       = get(h.ch03,'Value');
    
    % then pull values from the form-fillable boxes:
    p1.T2EV = 0.001*str2double(get(h.inT2,'String'));
    if twoMats
        p2.T2EV = p1.T2EV;
    end
    
    r.tau  = 0.001*str2num(get(h.inDT,'String')); %#ok<*ST2NM>
    r.TE   = 0.001*str2num(get(h.inTE,'String'));
        
    % check the value of tau supplied, if it's a single value, use it, if
    % it's a range, be careful
    if length(r.tau) == 1
        p1.tau = r.tau;
        if twoMats
            p2.tau = p1.tau;
        end
        r.defineTau = 0;
    else
        r.defineTau = 1;
    end
    
    % check whether the user has specified aggregating repeated runs, for
    % now, aggregate regardless of what was selected, because analysis is
    % only set up for 2D phase matrices
    if get(h.chAG,'Value') == get(h.chAG,'Max')
        sp1 = aggregate(sp1);
        if twoMats
            sp2 = aggregate(sp2);
        end
    else
        disp('You must aggregate repeated runs...');
        sp1 = aggregate(sp1);
        if twoMats
            sp2 = aggregate(sp2);
        end
    end
    
    % finally, run the analysis for all TE values given:
    for ii = 1:length(r.TE)
        p1.TE = r.TE(ii);
        
        plotSignal(sp1,p1,r);
        
        if twoMats
            p2.TE = r.TE(ii);
            plotSignal(sp2,p2,r);
        end
        
    end
    
    if r.display

        % add a legend to the graph, under certain circumstances
        if twoMats == 2
            leg1 = smartLegend(p1,p2,r);
            legend(leg1,'Location','South');
        elseif r.plotAnalytic
%             leg1 = smartLegend(p1,p1,r);
%             legend(leg1,'Location','South');
            legend('Simulated','Analytic','Location','South');
        end
    
        % save the graph, if the user wants it saved
        if r.save
            figtitle = ['signalResults/VS_Figure_',date,'_'];
            D = dir([figtitle,'*']);
            saveas(gcf,strcat(figtitle,num2str(length(D)+1),'.png'));
        end
        
    end
    
return; % runAnalysis

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%     runAnalysisLine                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function runAnalysisLine(h)
    % the same as runAnalysis, but it takes inputs from p.Results (input
    % parser) rather than from GUI:
    
    % first, read the users input, and load that dataset:
    load(h.Results.phasedata);
    
    % check that the input file has 1 storedPhase matrix, if not, throw an
    % error
    pnames = who('*phase*','*Phase*');
    if length(pnames) > 1
        error('Pick an input file with one matrix in it!')
        return;
    end
    
    sp1 = eval(pnames{1}); % take the first 'phase' variable
    sp1 = aggregate(sp1); % aggregate repeated runs (if there are any)
    p1 = p;
    
    r = h.Results;
    
    p1.T2EV = 0.001*h.Results.T2; % extravascular T2 (default 110 ms)
    
    r.tau = 0.001*h.Results.tau; % convert TE and tau values to s from ms
    r.TE  = 0.001*h.Results.TE;
    
    % variables that we don't care about
    r.fnum = 1;         % figure number
    r.ftit = '';        % figure title
    r.plotAnalytic = 0; % analytic signal
    r.plotErrors = 0;   % errorbars
    
    if strcmp(h.Results.seq,'GRE')
        r.plotFID   = 1;
        r.plotGESSE = 0;
        r.plotASE   = 0;
    elseif strcmp(h.Results.seq,'GESSE')
        r.plotFID   = 0;
        r.plotGESSE = 1;
        r.plotASE   = 0;
    else
        r.plotFID   = 0;
        r.plotGESSE = 0;
        r.plotASE   = 1;
    end
        
    % check the value of tau supplied, if it's a single value, use it, if
    % it's a range, be careful
    if length(r.tau) == 1
        p1.tau = r.tau;
        r.defineTau = 0;
    else
        r.defineTau = 1;
    end
    
    % finally, run the analysis for all TE values given:
    for ii = 1:length(r.TE)
        p1.TE = r.TE(ii);
        
        plotSignal(sp1,p1,r); 
    end
    
    if r.display

        % add a legend to the graph, under certain circumstances
        if r.plotAnalytic
            leg1 = smartLegend(p1,p1,r);
            legend(leg1,'Location','South');
        end
    
        % save the graph, if the user wants it saved
        if r.save
            figtitle = ['signalResults/VS_Figure_',date,'_'];
            D = dir([figtitle,'*']);
            saveas(gcf,strcat(figtitle,num2str(length(D)+1),'.png'));
        end
        
    end % if r.display
    
return; % runAnalysisLine

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%     GUI called functions            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function pickData(~,~,handles)
    % Let the user choose a data file to analyse
    [dataname,datadir] = uigetfile('*.mat','Select Vessel Simulation Dataset...');
    set(handles.inp1,'String',strcat(datadir,dataname));
return;

function pickData2(~,~,handles)
    % Let the user choose a data file to analyse
    [dataname,datadir] = uigetfile('*.mat','Select Vessel Simulation Dataset...');
    set(handles.inp2,'String',strcat(datadir,dataname));
return;

function switchASE(src,~,handles)
    % turn on the field for entering delta tau if ASE is ticked
    if get(src,'Value') == get(src,'Max')
        set(handles.inDT,'Enable','on');
    else
        set(handles.inDT,'Enable','off');
    end
return;

function switchT2(src,~,handles)
    % turn on the field for entering  T2, if T2 effects are included
    if get(src,'Value') == get(src,'Max')
        set(handles.inT2,'Enable','on');
    else
        set(handles.inT2,'Enable','off');
    end
return;

function switchPlot(src,~,handles)
    % turn on the field for entering figure number and title
    if get(src,'Value') == get(src,'Max')
        set(handles.inFG,'Enable','on');
        set(handles.inFT,'Enable','on');
        set(handles.ch01,'Enable','on');
        set(handles.ch02,'Enable','on');
        set(handles.ch03,'Enable','on');
    else
        set(handles.inFG,'Enable','off');
        set(handles.inFT,'Enable','off');
        set(handles.ch01,'Enable','off');
        set(handles.ch02,'Enable','off');
        set(handles.ch03,'Enable','off');
    end    

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%     other useful functions          %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function matrix2D = aggregate(matrix3D)
    % converts a 3D matrix M-by-N-by-P into a 2D matrix M-by-(N*P), for
    % sorting out those data sets where we performed separate runs, which
    % were useful for plotting standard deviation and stuff, but aren't
    % what we want to do generally.
    
    sz = size(matrix3D);
    
    % check that the input matrix is actually 3D, otherwise return it
    if length(sz) ~= 3
        matrix2D = matrix3D;
    else
        matrix2D = reshape(matrix3D,sz(1),(sz(2)*sz(3)));
    end
return;

function tstring = smartTitle(p1,p2)
    % parse the structures p1 and p2 in order to construct a useful title
    % for a graph that plots both of them together
    
    % variables we want to think about:
    %       Diffusion       p.D
    %       Radius          p.R
    %       Oxygenation     p.Y
    %       Volume          p.vesselFraction
    
    tstring = ''; % initialise
   
    % go through in the same order as above
    if p1.D == p2.D
        tstring = [tstring,'D = ',num2str(p1.D.*1e9),'x10^-^9, '];
    end
    
    if p1.R == p2.R
        tstring = [tstring,'R = ',num2str(p1.R.*1e6),'\mum, '];
    end
    
    if p1.Y == p2.Y
        tstring = [tstring,'OEF = ',num2str(1-p1.Y),', '];
    end
    
    if p1.vesselFraction == p2.vesselFraction
        tstring = [tstring,'DBV = ',num2str(p1.vesselFraction),', '];
    end
return;

function legs = smartLegend(p1,p2,r)
    % parse the structures p1 and p2 and find the elements that are
    % different, and use those to generete legends for the graph
    
    % initialization
    leg1 = '';
    leg2 = '';
    
    if p1.D ~= p2.D
        leg1 = [leg1,'D = ',num2str(p1.D*1e9),'x10^-^9, '];
        leg2 = [leg2,'D = ',num2str(p2.D*1e9),'x10^-^9, '];
    end
    
    if p1.R ~= p2.R
        leg1 = [leg1,'R = ',num2str(p1.Y*1e6),'\mum, '];
        leg2 = [leg2,'R = ',num2str(p2.Y*1e6),'\mum, '];
    end
    
    if p1.Y ~= p2.Y
        leg1 = [leg1,'OEF = ',num2str(p1.Y),', '];
        leg2 = [leg2,'OEF = ',num2str(p2.Y),', '];
    end
    
    if p1.vesselFraction ~= p2.vesselFraction
        leg1 = [leg1,'DBV = ',num2str(p1.vesselFraction),', '];
        leg2 = [leg2,'DBV = ',num2str(p2.vesselFraction),', '];
    end
    
    if r.plotAnalytic
        legs = {['Simulated ',leg1],['Analytical ',leg1],['Simulated ',leg2],['Analytical ',leg2]};
    else
        legs = {leg1,leg2};
    end
    
return;