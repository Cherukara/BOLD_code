% simAnalyse.m
% 
% Analysis of vessel simulation data generated by simrun.m (which calls the
% function simplevesselsim.m). This script should be a GUI-based anaylis
% tool, allowing the user to select a saved .mat file (which should contain
% 1 or 2 stored phase matrices, and a p structure containing all parameter
% information, and maybe some other stuff).
%
% The actual calculations of the anaylsis will generally be performed by
% the function MTC_plotSignal, which will be called in this script, and
% given specific functional specifiers by it (although MTC_plotSignal
% should still be useable on its own, as in within simrun.m)
%
% 
%       Copyright (C) University of Oxford, 2017
%
% 
% Created by MT Cherukara, February 2017
%
% CHANGELOG:
%
% 2017-02-23 (MTC). Added GUI.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%     (main) simAnalyse               %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function simAnalyse
    close all;
    
    % h - structure containing all ui element handles
    % r - structure containing all random parameter information
    r.open = 1; % initialize the structure, because we refer to it later
    
    % create figure
    fig = figure(99);
    set(fig,'Name','simAnalyse','OuterPosition',[200, 200, 800, 600]);
    
    
    % display some basic text
    h.tx00 = uicontrol('Style','Text',...
                       'Position',[100,480,600,30],...
                       'String','Analysis for Vessel Simulator Data',...
                       'FontSize',18);
                 
    % choose data file
    h.tx01 = uicontrol('Style','Text',...
                       'Position',[10,430,250,25],...
                       'String','Select phase data file to anaylse:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
    
    h.inpt = uicontrol('Style','Edit',...
                       'Position',[270,430,400,25],...
                       'String','Phase data file',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
    
    h.but1 = uicontrol('Style','Pushbutton',...
                       'Position',[680,430,100,25],...
                       'String','Browse...',...
                       'FontSize',14,...
                       'Callback',{@pickData,h});
                   
    % spin echo parameters
    h.tx12 = uicontrol('Style','Text',...
                       'Position',[120,360,40,25],...
                       'String','TE:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
                   
    h.inTE = uicontrol('Style','Edit',...
                       'Position',[160,360,40,25],...
                       'String','60',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
         
    h.tx13 = uicontrol('Style','Text',...
                       'Position',[200,360,40,25],...
                       'String','ms',...
                       'Fontsize',14,...
                       'HorizontalAlignment','Left');
               
    h.tx14 = uicontrol('Style','Text',...
                       'Position',[120,300,40,25],...
                       'String','tau:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
                   
    h.inDT = uicontrol('Style','Edit',...
                       'Position',[160,300,40,25],...
                       'String','4',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right',...
                       'Enable','off');
         
    h.tx15 = uicontrol('Style','Text',...
                       'Position',[200,300,40,25],...
                       'String','ms',...
                       'Fontsize',14,...
                       'HorizontalAlignment','Left'); 
                   
    % decide which sequences to plot using checkboxes
    h.tx10 = uicontrol('Style','Text',...
                       'Position',[20,390,100,25],...
                       'String','Sequences:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
    
    h.ch10 = uicontrol('Style','Checkbox',...
                       'Position',[30,360,100,25],...
                       'String','GRE',...
                       'FontSize',14);
    
    h.ch12 = uicontrol('Style','Checkbox',...
                       'Position',[30,330,100,25],...
                       'String','GESSE',...
                       'FontSize',14,...
                       'Callback',{@switchGESSE,h});
                   
    h.ch13 = uicontrol('Style','Checkbox',...
                       'Position',[30,300,100,25],...
                       'String','ASE',...
                       'FontSize',14,...
                       'Callback',{@switchASE,h});
                   
	h.ch14 = uicontrol('Style','Checkbox',...
                       'Position',[30,270,100,25],...
                       'String','MASE',...
                       'FontSize',14);
                   
    % other parameters
    h.tx20 = uicontrol('Style','Text',...
                       'Position',[400,390,150,25],...
                       'String','Analysis options:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
                   
    h.chAG = uicontrol('Style','Checkbox',...
                       'Position',[400,360,250,25],...
                       'String','Aggregate repeated runs',...
                       'FontSize',14,...
                       'Value',1);
                   
	h.tx21 = uicontrol('Style','Text',...
                       'Position',[450,300,40,25],...
                       'String','T2:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
                   
	h.inT2 = uicontrol('Style','Edit',...
                       'Position',[490,300,60,25],...
                       'String','110',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right',...
                       'Enable','off');
                   
	h.tx22 = uicontrol('Style','Text',...
                       'Position',[550,300,40,25],...
                       'String','ms',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
                   
    h.chT2 = uicontrol('Style','Checkbox',...
                       'Position',[400,330,200,25],...
                       'String','Include T2 effects',...
                       'FontSize',14,...
                       'Callback',{@switchT2,h});
                   
    h.chIV = uicontrol('Style','Checkbox',...
                       'Position',[400,270,250,25],...
                       'String','Include Intravascular signal',...
                       'FontSize',14);
   
                   
    % saving stuff out
    h.tx31 = uicontrol('Style','Text',...
                       'Position',[150,60,100,25],...
                       'String','Figure:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Right');
    
    h.inFG = uicontrol('Style','Edit',...
                       'Position',[250,60,40,25],...
                       'String','1',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
    
    h.tx30 = uicontrol('Style','Text',...
                       'Position',[30,90,150,25],...
                       'String','Output options:',...
                       'FontSize',14,...
                       'HorizontalAlignment','Left');
    
    h.ch31 = uicontrol('Style','Checkbox',...
                       'Position',[30,60,150,25],...
                       'String','Plot Graph',...
                       'FontSize',14,...
                       'Value',1);
                   
   	h.ch32 = uicontrol('Style','Checkbox',...
                       'Position',[30,30,150,25],...
                       'String','Save Results',...
                       'FontSize',14);
                   
	
                   
    % run analysis
    h.but0 = uicontrol('Style','Pushbutton',...
                       'Position',[650,20,130,60],...
                       'String','Plot',...
                       'FontSize',18,...
                       'Callback',{@runAnalysis,h});
                  
return;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%     runAnalysis                     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function runAnalysis(src,event,h)
    % this runs the actual analysis of our data
    
    % first, read the users input, and load that dataset:
    filename = get(h.inpt,'String');
    load(filename);
    
    % second, check user's selection of output options:
    r.display = get(h.ch31,'Value');
    r.fnum = str2double(get(h.inFG,'String'));
    r.save = get(h.ch32,'Value');
    
    % and sequence/analysis options:
    r.plotFID       = get(h.ch10,'Value');
    r.plotGESSE     = get(h.ch12,'Value');
    r.plotASE       = get(h.ch13,'Value');
    r.incT2         = get(h.chT2,'Value');
    r.incIV         = get(h.chIV,'Value'); % we'll worry about this later
    
    % then pull values from the form-fillable boxes:
    p.TE = 0.001*str2double(get(h.inTE,'String'));
    p.deltaTE = 0.001*str2double(get(h.inDT,'String'));
    p.T2EV = 0.001*str2double(get(h.inT2,'String'));
    
    % not that we've loaded the data, we want to see how many stored-phase
    % type variables we have (either 1 or 2) 
    
    twoMats = 0; % the default will be to analyse only 1 set of values at a time
    
    pnames = who('*phase*','*Phase*'); % this will list all the variables with the word 'phase' in their name
    
    sp1 = eval(pnames{1}); % take the first 'phase' variable
    
    if length(pnames) > 1
        twoMats = 1; % we'll use this later to repeat the analysis process
        sp2 = eval(pnames{2}); % if there are more than 3, tough...
    end
    
    % check whether the user has specified aggregating repeated runs, for
    % now, aggregate regardless of what was selected, because analysis is
    % only set up for 2D phase matrices
    if get(h.chAG,'Value') == get(h.chAG,'Max')
        sp1 = aggregate(sp1);
        if twoMats
            sp2 = aggregate(sp2);
        end
    else
        disp('You must aggregate repeated runs...');
        sp1 = aggregate(sp1);
        if twoMats
            sp2 = aggregate(sp2);
        end
    end
    
    % finally, run the analysis:
    plotSignal(sp1,p,r);
    if twoMats
        plotSignal(sp2,p,r);
    end
    
return;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%     GUI called functions            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function pickData(~,~,handles)
    % Let the user choose a data file to analyse
    [dataname,datadir] = uigetfile('*.mat','Select Vessel Simulation Dataset...');
    set(handles.inpt,'String',strcat(datadir,dataname));
return;

function switchGESSE(src,~,handles)
    % turn on the field for entering DT if GESSE is ticked - this will
    % screw up a little bit if you turn GESSE on, then turn ASE on, then
    % turn one of them off again, but it's too much hassle to fix.
    if get(src,'Value') == get(src,'Max')
        set(handles.inDT,'Enable','on');
    else
        set(handles.inDT,'Enable','off');
    end
return;

function switchASE(src,~,handles)
    % turn on the field for entering delta tau if ASE is ticked
    if get(src,'Value') == get(src,'Max')
        set(handles.inDT,'Enable','on');
    else
        set(handles.inDT,'Enable','off');
    end
return;

function switchT2(src,~,handles)
    % turn on the field for entering  T2, if T2 effects are included
    if get(src,'Value') == get(src,'Max')
        set(handles.inT2,'Enable','on');
    else
        set(handles.inT2,'Enable','off');
    end
return;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%     other useful functions          %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function matrix2D = aggregate(matrix3D)
    % converts a 3D matrix M-by-N-by-P into a 2D matrix M-by-(N*P), for
    % sorting out those data sets where we performed separate runs, which
    % were useful for plotting standard deviation and stuff, but aren't
    % what we want to do generally.
    
    sz = size(matrix3D);
    
    % check that the input matrix is actually 3D, otherwise return it
    if length(sz) ~= 3
        matrix2D = matrix3D;
    else
        matrix2D = reshape(matrix3D,sz(1),(sz(2)*sz(3)));
    end
return;